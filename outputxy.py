# Calculate the matching code of a single image

# opencv_python
import cv2 as cv
import random  
import LineCheck

X = []  # Stores the Y coordinate of the line that generated the dem
Y = []  # Store the Y coordinates generated by ancient paintings
lst1 = []  # Store cosine similarity
lst2 = []  # Store Jacard similarity

num = ''  # Which group of data

for cal in range(10000):
    # Read the contour corresponding to the remote sensing image
    pic_dem = cv.imread('', 0)  # DEM
    print('dem：', pic_dem.shape)
    for i in range(pic_dem.shape[1]):
        for j in range(pic_dem.shape[0]):
            if (pic_dem[j][i]) != 255:
                X.append(j)

    # Read the Outlines of ancient paintings
    pic_org = cv.imread('',0)  # Ancient painting
    print('painting：', pic_org.shape)
    for i in range(pic_org.shape[1]):
        for j in range(pic_org.shape[0]):
            if (pic_org[j][i]) != 255:
                Y.append(j)

    a = len(X)
    b = len(Y)

    # Random discard
    c = abs(a - b)

    if (a > b):
        for i in range(c):
            a -= 1
            d = random.randint(0, a - 1)
            del X[d]

    if (a < b):
        for i in range(c):
            b -= 1
            d = random.randint(0, b - 1)
            del Y[d]

# Calculated match
    LineCheck.Matchsize(X, Y)
    lst1.append(LineCheck.cosSim(X, Y))
    lst2.append(LineCheck.jaccardDisSim(X, Y))
    cal = cal + 1
    print(50 - cal)


def average(list):
    s = 0
    for x in list:
        s += x
    avg = 0
    len_list = len(list)
    avg = s / len_list
    return avg


print('cosSim_avg', average(lst1))
print('jaccard_avg', average(lst2))
# print(img.shape)
cv.waitKey(0)

# output
p = open(str(num) + '.txt', 'w')
p.write('DEM-Y：' + '\n')
p.write(str(X) + '\n')
p.write('Painting-Y：' + '\n')
p.write(str(Y))
p.close()

lst1.clear()
lst2.clear()
print('done')
